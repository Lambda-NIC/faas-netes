apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: gateway
  namespace: openfaas
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: gateway
    spec:
      serviceAccountName: faas-controller
      containers:
      - name: gateway
        image: lambdanic/faas-gateway:latest
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 2
          periodSeconds: 10
          timeoutSeconds: 2

        env:
        - name: functions_provider_url
          value: "http://127.0.0.1:8081/" # Final `.` specifies an absolute address
        - name: faas_nats_address
          value: "nats.openfaas.svc.cluster.local."
        - name: faas_nats_port
          value: "4222"
        - name: direct_functions
          value: "true"                             # Functions are invoked directly over the overlay network
        - name: direct_functions_suffix
          value: "openfaas-fn.svc.cluster.local."   # contains K8s namespace
        - name: read_timeout
          value: "65s"
        - name: write_timeout
          value: "65s"
        - name: upstream_timeout  # Must be smaller than read/write_timeout
          value: "60s"
        - name: basic_auth
          value: "false"
        - name: secret_mount_path
          value: "/etc/openfaas"
        - name: scale_from_zero
          value: "false"

        ports:
        - containerPort: 8080
          protocol: TCP

        resources:
          requests:
            memory: 250Mi
          limits:
            memory: 250Mi   # Adjust to suit needs of deployment
      - name: faas-netes
        image: lambdanic/faas-netes:latest
        imagePullPolicy: Always
        env:
        - name: port
          value: "8081"
        - name: function_namespace
          value: openfaas-fn
        - name: read_timeout
          value: "60s"
        - name: write_timeout
          value: "60s"
        ports:
        - containerPort: 8081
          protocol: TCP
      - name: etcd
        image: quay.io/coreos/etcd:latest
        resources:
          # TODO: Set memory limits when we've profiled the container for large
          # clusters, then set request = limit to keep this container in
          # guaranteed class. Currently, this container falls into the
          # "burstable" category so the kubelet doesn't backoff from restarting it.
          limits:
            cpu: 100m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 50Mi
        command:
         - /usr/local/bin/etcd
         - --name
         - etcd
         - --initial-advertise-peer-urls
         - http://0.0.0.0:2380
         - --listen-peer-urls
         - http://0.0.0.0:2380
         - --listen-client-urls
         - http://0.0.0.0:2379
         - --advertise-client-urls
         - http://0.0.0.0:2379
         - --initial-cluster
         - etcd=http://0.0.0.0:2380
         - --initial-cluster-state
         - new
        ports:
         - containerPort: 2379
           name: client
           protocol: TCP
         - containerPort: 2380
           name: server
           protocol: TCP
